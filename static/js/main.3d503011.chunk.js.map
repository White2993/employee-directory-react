{"version":3,"sources":["components/Functions/compare.js","components/Container/index.js","components/TableHead/index.js","components/CardBtn/index.js","components/pages/Employee.js","App.js","serviceWorker.js","index.js"],"names":["compare","a","b","nameA","name","toUpperCase","nameB","comparison","compareId","id","compareLocation","location","compareOccupation","occupation","Container","props","className","fluid","TableHead","scope","CardBtn","onClick","Employee","useState","employeeName","setEmployeeName","employeeId","setEmployeeId","employeeOccupation","setEmployeeOccupation","employeeLocation","setEmployeeLocation","setEmployeeInfo","value","map","o","key","useEffect","friends","class","e","sort","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d503011.chunk.js","sourcesContent":["export function compare(a, b) {\r\n  const nameA = a.name.toUpperCase();\r\n  const nameB = b.name.toUpperCase();\r\n\r\n  let comparison = 0;\r\n  if (nameA > nameB) {\r\n    comparison = 1;\r\n  } else if (nameA < nameB) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n}\r\n\r\nexport function compareId(a, b) {\r\n  const nameA = a.id\r\n  const nameB = b.id\r\n\r\n  let comparison = 0;\r\n  if (nameA > nameB) {\r\n    comparison = 1;\r\n  } else if (nameA < nameB) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n}\r\n\r\nexport function compareLocation(a, b) {\r\n  const nameA = a.location.toUpperCase();\r\n  const nameB = b.location.toUpperCase();\r\n\r\n  let comparison = 0;\r\n  if (nameA > nameB) {\r\n    comparison = 1;\r\n  } else if (nameA < nameB) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n}\r\n\r\nexport function compareOccupation(a, b) {\r\n  const nameA = a.occupation.toUpperCase();\r\n  const nameB = b.occupation.toUpperCase();\r\n\r\n  let comparison = 0;\r\n  if (nameA > nameB) {\r\n    comparison = 1;\r\n  } else if (nameA < nameB) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nfunction TableHead() {\r\n  return  (\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">ID</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Occupation</th>\r\n        <th scope=\"col\">Location</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CardBtn(props) {\r\n  return (\r\n    <button onClick={props.onClick} {...props} />\r\n  );\r\n}\r\n\r\nexport default CardBtn;","import React, { useState, useEffect } from \"react\";\r\nimport { compare, compareId, compareLocation, compareOccupation } from \"../Functions/compare\";\r\nimport friends from \"../../friends.json\";\r\nimport Container from \"../Container/index\";\r\nimport TableHead from \"../TableHead/index\";\r\nimport CardBtn from \"../CardBtn/index\"\r\n\r\nexport default function Employee() {\r\n    const [employeeName, setEmployeeName] = useState('');\r\n    const [employeeId, setEmployeeId] = useState('');\r\n    const [employeeOccupation, setEmployeeOccupation] = useState('');\r\n    const [employeeLocation, setEmployeeLocation] = useState('');\r\n\r\n    function setEmployeeInfo(value) {\r\n        setEmployeeName(value.map(o => <p key={o.id}>{o.name}</p>))\r\n        setEmployeeId(value.map(o => <p key={o.id}>{o.id}</p>))\r\n        setEmployeeOccupation(value.map(o => <p key={o.id}>{o.occupation}</p>))\r\n        setEmployeeLocation(value.map(o => <p key={o.id}>{o.location}</p>))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setEmployeeInfo(friends);\r\n      }, []);\r\n    \r\n    function sortByName() {\r\n      let newListName = friends.sort(compare);\r\n      setEmployeeInfo(newListName);\r\n    }\r\n    function sortById() {\r\n      let newListId = friends.sort(compareId);\r\n      setEmployeeInfo(newListId);\r\n    }\r\n    function sortByOccupation() {\r\n      let newListOccupation = friends.sort(compareOccupation);\r\n      setEmployeeInfo(newListOccupation);\r\n    }\r\n    function sortByLocation() {\r\n      let newListLocation = friends.sort(compareLocation);\r\n      setEmployeeInfo(newListLocation);\r\n    }\r\n    return (\r\n        <div>\r\n            <Container>\r\n            <table className=\"table table-striped table-sm\">\r\n            <TableHead />\r\n            <tbody>\r\n                <tr>\r\n                    <th scope=\"col\" key={employeeId}>{employeeId}</th>\r\n                    <th scope=\"col\">{employeeName}</th>\r\n                    <th scope=\"col\">{employeeOccupation}</th>\r\n                    <th scope=\"col\">{employeeLocation}</th>\r\n                </tr>\r\n            </tbody>\r\n            </table>\r\n            <div class='btn-group btn-group-sm'>\r\n              <CardBtn className=\"btn btn-success\" onClick={e => sortByName()}> Sort By Name </CardBtn>\r\n              <CardBtn className=\"btn btn-primary\" onClick={e => sortById()}> Sort By ID </CardBtn>\r\n              <CardBtn className=\"btn btn-success\" onClick={e => sortByOccupation()}> Sort By Occupation </CardBtn>\r\n              <CardBtn className=\"btn btn-primary\" onClick={e => sortByLocation()}> Sort By Location </CardBtn>\r\n            </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'; \nimport './App.css';\nimport Employee from './components/pages/Employee'\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path='/employeedirectoryreact' component={Employee} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}